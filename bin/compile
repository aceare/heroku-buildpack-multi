#!/usr/bin/env bash

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

for BUILDPACK in $(cat $1/.buildpacks); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

echo "===============> DBG: dollar 1, 2: $1, $2"
echo "=====> DBG: url, branch: $url, $branch"
echo "=====> DBG: dir: $dir"

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
    fi
echo "=====> DBG: downloaded/cloned: $url"
    cd $dir
echo "=====> DBG: entered $dir"

    if [ "$branch" != "" ]; then
echo "=====> DBG: getting branch: $branch"
      git checkout $branch >/dev/null 2>&1
    fi

echo "=====> DBG: going to do chmod: $dir/bin/{detect,compile,release}"
    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    if [[ "$url" =~ ruby ]]; then
      framework="Ruby/Rails"
echo "=====> DBG: skipping detect. set framework: $framework"
    else
echo "=====> DBG: going to do: $dir/bin/detect $1"
      framework=$($dir/bin/detect $1)
    fi

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $1 $2

      if [ $? != 0 ]; then
        exit 1
      fi

echo "=====> DBG: done: $dir/bin/compile $1 $2"
      if [ -x $dir/bin/release ]; then
echo "=====> DBG: going to do: $dir/bin/release $1"
        $dir/bin/release $1 > $1/last_pack_release.out
      fi
    fi
  fi
done

if [ -e $1/last_pack_release.out ]; then
  echo "Using release configuration from last framework $framework:" | indent
  cat $1/last_pack_release.out | indent
fi
